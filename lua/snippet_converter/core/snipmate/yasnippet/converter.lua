local NodeType = require("snippet_converter.core.node_type")
local base_converter = require("snippet_converter.core.converter")
local err = require("snippet_converter.utils.error")
local io = require("snippet_converter.utils.io")

local M = {}

M.node_visitor = {
  [NodeType.TABSTOP] = function(node)
    if not node.transform then
      return "$" .. node.int
    end
    return ("${%s:%s}"):format(node.int, M.node_visitor[NodeType.TRANSFORM](node.transform))
  end,
  [NodeType.TRANSFORM] = function(node)
    if node.regex then
      err.raise_converter_error("regex in transform node")
    end
    return node.replacement
  end,
  [NodeType.EMACS_LISP_CODE] = function(node)
    return ("`%s`"):format(node.code)
  end,
  [NodeType.TEXT] = function(node)
    -- Escape ambiguous chars and backslashes
    return node.text:gsub([[\]], [[\\]]):gsub("%$", "\\%$"):gsub("`", "\\`")
  end,
}

M.visit_node = setmetatable(M.node_visitor, {
  __index = base_converter.visit_node(M.node_visitor),
})

M.convert = function(snippet, _)
  local description = ""
  if snippet.description then
    -- Replace newline characters with spaces and remove trailing whitespace
    description = ("# name: %s\n"):format(snippet.description:gsub("\n", " "):gsub("%s*$", ""))
  end

  local body = base_converter.convert_ast(snippet.body, M.visit_node)
  return {
    -- The trigger and path are needed for exporting
    trigger = snippet.trigger,
    path = snippet.path,
    body = string.format(
      [[
%s# key: %s
# --
%s]],
      description,
      snippet.trigger,
      body
    ),
  }
end

local HEADER_STRING = [[
# -*- mode: snippet -*-
# Generated by snippet-converter.nvim (https://github.com/smjonas/snippet-converter.nvim)

]]

-- The first table entry is the child mode, the others are parent modes
local ft_to_modenames = {
  sh = { "shell", parent_modes = { "shell-script", "sh", "sh-script" } },
}

-- Takes a list of converted snippets for a particular filetype,
-- separates them by newlines and exports them to a file.
-- @param converted_snippets table(trigger: string, body: string) A list of snippet tables where each item is a snippet table to be exported
-- @param mode_name string The filetype of the input snippets
-- @param output_dir string The absolute path to the directory to write the snippets to
-- @param context []? #A table of additional snippet contexts optionally provided the source parser (e.g. extends directives from UltiSnips)
M.export = function(converted_snippets, filetype, output_path, context)
  local modes = ft_to_modenames[filetype]
  local child_mode = modes and modes[1]

  for _, snippet in ipairs(converted_snippets) do
    local snippet_lines = HEADER_STRING .. snippet.body
    local output_file_path = ("%s/%s-mode/%s"):format(output_path, child_mode, snippet.trigger)
    io.write_file(vim.split(snippet_lines, "\n"), output_file_path)
  end

  -- Create a .yas-parents file to share snippets
  if child_mode then
    local parent_modes = vim.tbl_map(function(mode_name)
      return mode_name + "-mode"
    end, modes.parent_modes)

    local yas_parents_path = ("%s/%s-mode/.yas-parents"):format(output_path, child_mode)
    io.write_file({ table.concat(parent_modes, " ") + "\n" }, yas_parents_path)
  end

  return output_path
end

return M
